# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DrA5d8-3J3WO0NLqLDEl1k60i_gdwEcE
"""

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline
import pandas as pd
from google.colab import files
uploaded = files.upload()
import io
df = pd.read_csv(io.BytesIO(uploaded['MaddenRankings.csv']))
df.drop(['Card_set','Player_page','Xbox_price','Ps4_price','Quick_sell'],  axis=1, inplace=True)
df= df.dropna()
from sklearn.metrics import accuracy_score
from sklearn import preprocessing
label = preprocessing.LabelEncoder()
df['Name']= label.fit_transform(df['Name'])
df['Position']= label.fit_transform(df['Position'])
df['Team']= label.fit_transform(df['Team'])
cols = [col for col in df.columns if col not in ['Name','Position','Team','Overall']]
data = df[cols]
target = df['Overall']
from sklearn.model_selection import train_test_split
data_train20, data_test20, target_train20, target_test20 = train_test_split(data,target, test_size = 0.20, random_state = 10)
data_train30, data_test30, target_train30, target_test30 = train_test_split(data,target, test_size = 0.30, random_state = 10)

#Naive-Bayes
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
#20 percent
print("Naives-Bayes using 80% of the data as training data and 20% as test data.")
pred = gnb.fit(data_train20, target_train20).predict(data_test20)
print("Naive-Bayes accuracy : ",accuracy_score(target_test20, pred, normalize = True))
#30 percent
print("Naive-Bayes using 70% of the data as training data and 30% as test data.")
pred = gnb.fit(data_train30, target_train30).predict(data_test30)
print("Naive-Bayes accuracy : ",accuracy_score(target_test30, pred, normalize = True))


#K-Neighbors
from sklearn.neighbors import KNeighborsClassifier
#20 percent
print("KNeighnors using 80% of the data as training data and 20% as test data.")
neigh = KNeighborsClassifier(n_neighbors=3)
pred = neigh.fit(data_train20, target_train20).predict(data_test20)
print ("KNeighbors accuracy score with 3 neighbors : ",accuracy_score(target_test20, pred))
neigh = KNeighborsClassifier(n_neighbors=6)
neigh.fit(data_train20, target_train20)
pred = neigh.predict(data_test20)
print ("KNeighbors accuracy score with 6 neighbors : ",accuracy_score(target_test20, pred))
#30 percent
print("KNeighnors using 70% of the data as training data and 30% as test data.")
neigh = KNeighborsClassifier(n_neighbors=3)
neigh.fit(data_train30, target_train30)
pred = neigh.predict(data_test30)
print ("KNeighbors accuracy score with 3 neighbors : ",accuracy_score(target_test30, pred))
neigh = KNeighborsClassifier(n_neighbors=6)
neigh.fit(data_train30, target_train30)
pred = neigh.predict(data_test30)
print ("KNeighbors accuracy score with 6 neighbors : ",accuracy_score(target_test30, pred))